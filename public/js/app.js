const hamburguer=document.querySelector(".hamburguer"),email={nombre:"",email:"",telefono:""},emailNewsletter={emailNews:""},formHeader=document.querySelector("#formHeader"),inputName=document.querySelector("#name"),inputEmail=document.querySelector("#email"),inputTel=document.querySelector("#tel"),formNewsletter=document.querySelector("#formNewsletter"),inputEmailNews=document.querySelector("#emailNews");function eventListeners(){hamburguer.addEventListener("click",openCloseNav),inputName.addEventListener("input",validar),inputEmail.addEventListener("input",validar),inputTel.addEventListener("input",validar),inputEmailNews.addEventListener("input",validar),formHeader.addEventListener("submit",sendEmail),formNewsletter.addEventListener("submit",sendEmail)}function openCloseNav(){const e=document.querySelector(".nav");e.classList.toggle("nav--activo"),closeNavOnClick(e)}function closeNavOnClick(e){document.querySelectorAll(".nav__link").forEach((t,r)=>{t.addEventListener("click",t=>{t.preventDefault();document.querySelector(t.target.attributes.href.value).scrollIntoView({behavior:"smooth"});"A"===t.target.tagName&&e.classList.remove("nav--activo")})}),window.addEventListener("click",t=>{const r=t.target.parentElement;e.classList.contains("nav--activo")&&r!==hamburguer&&e.classList.remove("nav--activo")})}function validar(e){const t=e.target,r=t.parentElement,i=t.name,l=t.value.trim().toLowerCase();return""===l&&"emailNews"!==i?(showAlert(`El ${i} es obligatorio`,r),email[i]="",void checkEmail()):"email"!==i||isValidEmail(l)?"telefono"!==i||isValidTel(l)?"emailNews"!==i||isValidEmail(l)?(cleanAlert(r),r.parentElement===formHeader&&(email[i]=l),r.parentElement===formNewsletter&&(emailNewsletter[i]=l),checkEmail(),void checkEmailNewsletter()):(showAlert("El email es invalido",r),delete email.emailNews,emailNewsletter[i]="",void checkEmailNewsletter()):(showAlert("El teléfono es inválido",r),email[i]="",void checkEmail()):(showAlert("El email es inválido",r),email[i]="",void checkEmail())}function showAlert(e,t){cleanAlert(t);const r=t.querySelector(".form__field");r.classList.add("form__field--error"),r.placeholder=e}function cleanAlert(e){const t=e.querySelector(".form__field--error");t&&(t.classList.remove("form__field--error"),t.placeholder="Ingresa tu "+t.name)}function isValidEmail(e){return/^\w+([.-_+]?\w+)*@\w+([.-]?\w+)*(\.\w{2,10})+$/.test(e)}function isValidTel(e){return/^(\+52|0052|52)?[ -]*[ -]*([0-9][ -]*){10}/.test(e)}function checkEmail(){const e=document.querySelector("#btnSubmit");Object.values(email).includes("")?e.disabled=!0:e.disabled=!1}function checkEmailNewsletter(){const e=document.querySelector("#btnSubscribe");Object.values(emailNewsletter).includes("")?e.disabled=!0:e.disabled=!1}function sendEmail(e){e.preventDefault();const t=e.target;if(t===formHeader){const e=document.querySelector("#spinner");return e.classList.add("form__spinner--activo"),e.classList.remove("form__spinner"),void setTimeout(()=>{e.classList.remove("form__spinner--activo"),e.classList.add("form__spinner"),resetForm();const t=document.createElement("P");t.classList.add("form__exito"),t.textContent="Mensaje envíado exitosamente",formHeader.appendChild(t),setTimeout(()=>{t.remove()},2e3)},3e3)}if(t===formNewsletter){const e=document.querySelector("#spinnerNews");return e.classList.add("form__spinner--activo"),e.classList.remove("form__spinner"),void setTimeout(()=>{e.classList.remove("form__spinner--activo"),e.classList.add("form__spinner"),resetForm();const t=document.createElement("P");t.classList.add("form__exito"),t.classList.add("form__exito--newsletter"),t.textContent="Gracias por suscribirte",formNewsletter.appendChild(t),setTimeout(()=>{t.remove()},2e3)},3e3)}}function resetForm(){email.nombre="",email.email="",email.telefono="",emailNewsletter.emailNews="",formHeader.reset(),formNewsletter.reset(),checkEmail(),checkEmailNewsletter()}document.addEventListener("DOMContentLoaded",eventListeners);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
