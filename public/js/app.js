const hamburguer=document.querySelector(".hamburguer"),email={nombre:"",email:"",telefono:""},emailNewsletter={email:""},formHeader=document.querySelector("#formHeader"),inputName=document.querySelector("#name"),inputEmail=document.querySelector("#email"),inputTel=document.querySelector("#tel"),formNewsletter=document.querySelector("#formNewsletter"),inputEmailNewsletter=document.querySelector("#emailNews");function eventListeners(){hamburguer.addEventListener("click",openCloseNav),inputName.addEventListener("input",validar),inputEmail.addEventListener("input",validar),inputTel.addEventListener("input",validar),inputEmailNewsletter.addEventListener("input",validar),formHeader.addEventListener("submit",sendEmail),formNewsletter.addEventListener("submit",sendEmail)}function openCloseNav(){const e=document.querySelector(".nav");e.classList.toggle("nav--activo"),closeNavOnClick(e)}function closeNavOnClick(e){document.querySelectorAll(".nav__link").forEach((t,r)=>{t.addEventListener("click",t=>{t.preventDefault();document.querySelector(t.target.attributes.href.value).scrollIntoView({behavior:"smooth"});"A"===t.target.tagName&&e.classList.remove("nav--activo")})}),window.addEventListener("click",t=>{const r=t.target.parentElement;e.classList.contains("nav--activo")&&r!==hamburguer&&e.classList.remove("nav--activo")})}function validar(e){const t=e.target,r=t.parentElement,i=t.id,l=t.name,n=t.value.trim().toLowerCase();return""===n&&"emailNews"!==i?(showAlert(`El ${l} es obligatorio`,r),email[l]="",void checkEmail()):"email"!==i||isValidEmail(n)?"telefono"!==i||isValidTel(n)?"emailNews"!==i||isValidEmail(n)?(cleanAlert(r),fillObjects(r,l,n),checkEmail(),void checkEmailNewsletter()):(showAlert("El email es invalido",r),emailNewsletter[l]="",void checkEmailNewsletter()):(showAlert("El teléfono es inválido",r),email[l]="",void checkEmail()):(showAlert("El email es inválido",r),email[l]="",void checkEmail())}function showAlert(e,t){cleanAlert(t);const r=t.querySelector(".form__field");r.classList.add("form__field--error"),r.placeholder=e}function cleanAlert(e){const t=e.querySelector(".form__field--error");t&&(t.classList.remove("form__field--error"),t.placeholder="Ingresa tu "+t.name)}function isValidEmail(e){return/^\w+([.-_+]?\w+)*@\w+([.-]?\w+)*(\.\w{2,10})+$/.test(e)}function isValidTel(e){return/^(\+52|0052|52)?[ -]*[ -]*([0-9][ -]*){10}/.test(e)}function fillObjects(e,t,r){e.parentElement===formHeader&&(email[t]=r),e.parentElement===formNewsletter&&(emailNewsletter[t]=r)}function checkEmail(){const e=document.querySelector("#btnSubmit");Object.values(email).includes("")?e.disabled=!0:e.disabled=!1}function checkEmailNewsletter(){const e=document.querySelector("#btnSubscribe");Object.values(emailNewsletter).includes("")?e.disabled=!0:e.disabled=!1}function sendEmail(e){e.preventDefault();const t=e.target;if(t===formHeader){const e=document.querySelector("#spinner");return e.classList.add("form__spinner--activo"),e.classList.remove("form__spinner"),void setTimeout(()=>{e.classList.remove("form__spinner--activo"),e.classList.add("form__spinner"),resetForm(t);const r=document.createElement("P");r.classList.add("form__exito"),r.textContent="Mensaje envíado exitosamente",formHeader.appendChild(r),setTimeout(()=>{r.remove()},2e3)},3e3)}if(t===formNewsletter){const e=document.querySelector("#spinnerNews");return e.classList.add("form__spinner--activo"),e.classList.remove("form__spinner"),void setTimeout(()=>{e.classList.remove("form__spinner--activo"),e.classList.add("form__spinner"),resetForm(t);const r=document.createElement("P");r.classList.add("form__exito"),r.classList.add("form__exito--newsletter"),r.textContent="Gracias por suscribirte",formNewsletter.appendChild(r),setTimeout(()=>{r.remove()},2e3)},3e3)}}function resetForm(e){return e===formHeader?(email.nombre="",email.email="",email.telefono="",formHeader.reset(),void checkEmail()):e===formNewsletter?(emailNewsletter.email="",formNewsletter.reset(),void checkEmailNewsletter()):void 0}document.addEventListener("DOMContentLoaded",eventListeners);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
